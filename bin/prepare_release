#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse
import distutils.dir_util as dir_util
import textwrap
import timeit
import json
from collections import OrderedDict

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

parser = argparse.ArgumentParser(description='For Trinity release',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('target', metavar='TARGET', choices=['all', 'build', 'tag', 'update'],
                    help=textwrap.dedent('''\
                         Specify the target.
                         all: update code and build;
                         build: build app;
                         tag: add tag for trinity and all submodules;
                         update: update code.
                     '''))
parser.add_argument('-pf', '--platform', dest='platform', required=False,
                    help='Specify the build platform.')
parser.add_argument('-bt', '--buildtype', dest='buildtype', required=False,
                    help='Specify the build type, elastOS or native, default is elastOS.')
parser.add_argument('-bv', '--buildvariant', dest='buildvariant', required=False,
                    help='Specify the build variant.')
args = parser.parse_args()

SCRIPT_PATH=os.path.realpath(__file__)
TOOLCHAINS_DIR_PATH=os.path.dirname(os.path.dirname(SCRIPT_PATH))
TOOLCHAINS_DIR_NAME=os.path.basename(TOOLCHAINS_DIR_PATH)
PROJECT_DIR_PATH=os.path.join(TOOLCHAINS_DIR_PATH, "..")
APP_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "App")

###############
### METHODS ###
###############

def print_with_color(color, message):
    print(color + message + bcolors.ENDC)

def run_cmd(cmd, ignore_error=False):
    print_with_color(bcolors.OKCYAN, "Running: " + cmd)
    ret = subprocess.call(cmd, shell=True)
    if not ignore_error and ret != 0:
        print_with_color(bcolors.FAIL, "Fail to: " + cmd)
        sys.exit(ret)
    return ret

def check_firebase():
    if not os.path.isfile(os.path.join(APP_DIR_PATH + '/GoogleService-Info.plist')):
        print_with_color(bcolors.FAIL, "Can not find GoogleService-Info.plist!")
        sys.exit(1)
    if not os.path.isfile(os.path.join(APP_DIR_PATH + '/google-services.json')):
        print_with_color(bcolors.FAIL, "Can not find google-services.json!")
        sys.exit(1)

def update_code(branchName, originBranch):
    # fetch --all
    os.chdir(PROJECT_DIR_PATH)
    cmd = "git fetch --all"
    run_cmd(cmd)
    cmd = "git submodule foreach 'git fetch --all'"
    run_cmd(cmd)

    update_code = input("Any changes in the working tree are discarded. Type 'y' to continue :")
    if update_code.lower() != 'y':
        sys.exit(1)

    cmd = "git branch %s & git checkout %s && git reset --hard origin/%s"%(branchName,branchName,originBranch)
    run_cmd(cmd)

    # Maybe the branch already exist, so add "& true" to return true
    cmd = "git submodule foreach 'git branch %s & true'"%(branchName)
    run_cmd(cmd)
    cmd = "git submodule foreach 'git checkout %s && git reset --hard origin/%s'"%(branchName,originBranch)
    run_cmd(cmd)

    update_code = input("Clobber the porject? You should clobber when build a new version. Type 'y' to continue :")
    if update_code.lower() == 'y':
        run_cmd('./ToolChains/bin/build clobber')

def tag():
    # for Trinity and all submodules
    # get tag name
    tagName = input("Pls input the tag name:")
    tag_push = input("tag name is " + tagName + "\nType 'y' to tag and push :")
    if tag_push.lower() != 'y':
        sys.exit(1)

    os.chdir(PROJECT_DIR_PATH)
    cmd = "git tag %s && git push origin %s"%(tagName,tagName)
    run_cmd(cmd)
    cmd = "git submodule foreach 'git tag %s && git push origin %s'"%(tagName,tagName)
    run_cmd(cmd)

def getBuildArg():
    buildArg = ""
    if args.buildtype:
        buildArg += " -bt " + args.buildtype
    if args.buildvariant:
        buildArg += " -bv " + args.buildvariant
    return buildArg

def let_user_pick(options):
    for idx, element in enumerate(options):
        print_with_color(bcolors.OKCYAN, "{}) {}".format(idx+1,element))

    while True:
        i = input("Enter number: ")
        try:
            if 0 < int(i) <= len(options):
                return int(i) - 1
        except:
            pass
    return None

startTime = timeit.default_timer()

if args.target == "all" or args.target == "build":
    if not args.platform:
        print_with_color(bcolors.OKCYAN, "Pls choose the platform: [android, ios]")
        options = ["android", "ios"]
        index = let_user_pick(options)
        args.platform = options[index]

if args.target == "all" or args.target == "update":
    update_code("release", "release")

if args.target == "tag":
    tag()

if args.target == "all" or args.target == "build":
    os.chdir(PROJECT_DIR_PATH)
    check_firebase()

    # upload soucemap to sentry for better debugging
    run_cmd('npm install @sentry/cli -g')
    run_cmd('sentry-cli login')

    run_cmd('./ToolChains/bin/build all -pf ' + args.platform + ' --release  --uploadsourcemap --autoclean ' + getBuildArg())

elapsed = timeit.default_timer() - startTime
minutes = elapsed / 60
seconds = elapsed % 60
print_with_color(bcolors.OKCYAN, 'elapsed time [%d min %0.2fs]' % (minutes, seconds))
